plugins {
  id 'com.android.application'
  id 'kotlin-android'
}

android {
  compileSdkVersion rootProject.compileSdkVersion

  defaultConfig {
    applicationId "com.minwan.weatherforecast"
    minSdkVersion rootProject.minSdkVersion
    targetSdkVersion rootProject.targetSdkVersion
    versionCode 1
    versionName "1.0"

    ndk {
      moduleName "openweather-jni"
    }

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  externalNativeBuild {
    ndkBuild {
      path 'src/main/cpp/Android.mk'
    }
  }

  buildTypes {
    debug {
      buildConfigField "String", "HOST_MOCK", '"http://localhost:5555"'
      buildConfigField "String", "HOST_PROD", '"https://api.openweathermap.org"'

      // set this flag to true before running instrumented test case
      // to allow fixed response from mockWebServer
      // true : use mockeWebServer response for testing
      // false : use response from OpenWeather service
      buildConfigField "boolean", "IS_MOCK_TEST_ENABLE", "false"

      manifestPlaceholders = [usesCleartextTraffic:"true"]
      debuggable true
    }
    release {
      buildConfigField "String", "HOST_PROD", '"https://api.openweathermap.org"'
      buildConfigField "boolean", "IS_MOCK_TEST_ENABLE", "false"
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      manifestPlaceholders = [usesCleartextTraffic:"false"]
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
  }

  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }

  buildFeatures {
    viewBinding = true
  }

  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
  }
}

dependencies {
  implementation fileTree(dir: 'libs')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
  implementation "androidx.appcompat:appcompat:$supportLibVersion"
  implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
  implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
  implementation "com.google.android.material:material:$materialVersion"

  // retrofit
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
  implementation "com.squareup.retrofit2:retrofit-mock:$retrofitVersion"
  implementation "com.squareup.okhttp3:logging-interceptor:$okhttpLoggingInterceptorVersion"

  // architecture components
  implementation "androidx.core:core-ktx:$coreVersion"
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"

  // Test
  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.3.0'
  androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  androidTestImplementation 'androidx.test:rules:1.4.0'
  androidTestImplementation 'androidx.test:runner:1.4.0'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}